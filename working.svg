<?xml version="1.0" encoding="UTF-8"?>
<svg xmlns="http://www.w3.org/2000/svg" width="100%" height="100%">
  <style>
    svg { font-family: Arial, sans-serif; font-size: 16px; }

    a {
      color: blue;
      text-decoration: underline;
      cursor: pointer;
      display: inline; /* keep links inline */
    }
    a:hover { color: #551A8B; }
    a:visited { color: #309ef2; }

    .container {
      display: flex;
      flex-direction: column;
      gap: 4px;
      padding: 10px;
      box-sizing: border-box;
      height: 70vh;
      overflow-y: auto;
      border: 1px solid #ccc;
    }

    .above-text {
      font-size: 18px;
      margin-bottom: 8px;
      color: #333;
    }

    input {
      padding: 5px 8px;
      font-size: 16px;
      width: 250px;
      margin-left: 10px;
    }

    .controls {
      display: flex;
      align-items: center;
      margin-bottom: 10px;
      gap: 10px;
    }

    .controls label { font-weight: bold; }
  </style>

  <foreignObject x="0" y="0" width="100%" height="100%">
    <body xmlns="http://www.w3.org/1999/xhtml">
      <!-- Placeholder for dynamic HTML above search bar -->
      <div id="aboveText" class="above-text"></div>

      <!-- Controls with search -->
      <div class="controls">
        <label for="searchInput">Search:</label>
        <input type="text" id="searchInput" placeholder="Type to filter games..." />
      </div>

      <!-- Links container -->
      <div id="links" class="container"></div>

      <script type="text/javascript"><![CDATA[
        (function(){
          if(window.localStorage){
            if(!localStorage.getItem('firstLoad')){
              localStorage['firstLoad']=true;
              location.reload();
            } else localStorage.removeItem('firstLoad');
          }
        })();

        window.onload = async function() {
          const container = document.getElementById('links');
          const aboveTextDiv = document.getElementById('aboveText');

          // Load above-text.json
          const ABOVE_TEXT_JSON = "https://raw.githubusercontent.com/Calvin99Cooler/svg-testing/main/above-text.json";

          try {
            const textResponse = await fetch(ABOVE_TEXT_JSON + "?t=" + Date.now());
            const textData = await textResponse.json();
            if(textData && textData.html){
              aboveTextDiv.innerHTML = textData.html;
              // Make only <p> that contains <a> inline
              aboveTextDiv.querySelectorAll('p').forEach(p => {
                if(p.querySelector('a')) {
                  p.style.display = 'inline';
                  p.style.margin = '0';
                }
              });
            }
          } catch(err){
            console.error("Failed to load above-text.json:", err);
            aboveTextDiv.textContent = "";
          }

          // Load the game list
          try {
            const RAW_JSON = "https://raw.githubusercontent.com/Calvin99Cooler/bazinga-games/main/single-html/zones.json";
            const response = await fetch(RAW_JSON + "?t=" + Date.now());
            const zones = await response.json();

            function renderLinks(filter='') {
              container.innerHTML = '';
              zones.filter(z => z.name.toLowerCase().includes(filter.toLowerCase()))
                   .forEach(zone => {
                const link = document.createElement('a');
                link.textContent = zone.name;
                link.href = '#';
                link.addEventListener('click', async e => {
                  e.preventDefault();
                  // Construct the filename as {name}.html
                  const gameHtmlUrl = `https://raw.githubusercontent.com/Calvin99Cooler/bazinga-games/main/single-html/${encodeURIComponent(zone.name)}.html`;
                  try {
                    const htmlText = await fetch(gameHtmlUrl + "?t=" + Date.now()).then(r=>r.text());
                    const newTab = window.open('about:blank','_blank');
                    newTab.document.write(htmlText);
                    newTab.document.close();
                  } catch(err){ alert('Could not load HTML for: '+zone.name); }
                });
                container.appendChild(link);
              });
            }

            renderLinks();
            document.getElementById('searchInput').addEventListener('input', e => renderLinks(e.target.value));
          } catch(e) {
            const errorMsg = document.createElement('div');
            errorMsg.textContent = 'Failed to load games.';
            errorMsg.style.color='red';
            container.appendChild(errorMsg);
            console.error(e);
          }
        };
      ]]></script>
    </body>
  </foreignObject>
</svg>
